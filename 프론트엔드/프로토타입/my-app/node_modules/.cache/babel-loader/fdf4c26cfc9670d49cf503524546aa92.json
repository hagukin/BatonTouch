{"ast":null,"code":"var _jsxFileName = \"/home/habin/\\uB9B4\\uB808\\uC774\\uC18C\\uC124\\uD504\\uB85C\\uC81D\\uD2B8/BatonTouch/\\uD504\\uB860\\uD2B8\\uC5D4\\uB4DC/\\uD504\\uB85C\\uD1A0\\uD0C0\\uC785/my-app/src/new_components/MainSection/InputSentenceBox/InputSentenceBox.jsx\";\nimport React from \"react\";\nimport InputSentence from \"./InputSentence\";\nimport InputTool from \"./InputTool\";\nimport \"./InputSentenceBox.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputSentenceBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnClickButton = () => {\n      if (this.state.text.length > 130) {\n        alert(\"130자 초과입니다.\");\n      } else {\n        if (confirm('\"' + this.state.text + '\"' + \"정말로 이 문장을 업로드 하겠습니까?\\n한번 올린 문장은 수정 불가능 합니다.\")) {\n          document.cookie = \"isupload=true\";\n          this.props.onAddSub(this.state.text); // 상위 컴포넌트로 text전달\n\n          this.setState({\n            text: \"\"\n          });\n        } // // 백엔드 서버로 데이터 전송\n        // this.postSentence();\n\n      }\n    };\n\n    this.handleChangeSentence = _text => {\n      // InputSentence의 onChange가 호출\n      // this.state.text 변경\n      this.setState({\n        text: _text\n      });\n    };\n\n    this.state = {\n      text: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InputSentenceBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [this.state.text.length, \"/130\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSentence, {\n        text: this.state.text,\n        onChangeSentence: this.handleChangeSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputTool, {\n        onClickButton: this.handleOnClickButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n  async postSentence() {\n    const res = await fetch(\"api주소\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: 2,\n        // TODO\n        writer: \"\",\n        title: \"mysql2\",\n        content: \"2\",\n        comment: \"\",\n        date: \"2021-08-01T11:30:57.618483Z\",\n        // TODO\n        upvote: 0,\n        downvote: 0,\n        position: 0,\n        end_story: false\n      })\n    });\n    const data = await res.json();\n    return data;\n  }\n\n}\n\nexport default InputSentenceBox;","map":{"version":3,"sources":["/home/habin/릴레이소설프로젝트/BatonTouch/프론트엔드/프로토타입/my-app/src/new_components/MainSection/InputSentenceBox/InputSentenceBox.jsx"],"names":["React","InputSentence","InputTool","InputSentenceBox","Component","constructor","props","handleOnClickButton","state","text","length","alert","confirm","document","cookie","onAddSub","setState","handleChangeSentence","_text","render","postSentence","res","fetch","method","headers","body","JSON","stringify","id","writer","title","content","comment","date","upvote","downvote","position","end_story","data","json"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,wBAAP;;;AACA,MAAMC,gBAAN,SAA+BH,KAAK,CAACI,SAArC,CAA+C;AAC7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBnBC,mBAjBmB,GAiBG,MAAM;AAC1B,UAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,MAAhB,GAAyB,GAA7B,EAAkC;AAChCC,QAAAA,KAAK,CAAC,aAAD,CAAL;AACD,OAFD,MAEO;AACL,YAAIC,OAAO,CAAC,MAAM,KAAKJ,KAAL,CAAWC,IAAjB,GAAwB,GAAxB,GAA8B,6CAA/B,CAAX,EAA0F;AACxFI,UAAAA,QAAQ,CAACC,MAAT,GAAkB,eAAlB;AACA,eAAKR,KAAL,CAAWS,QAAX,CAAoB,KAAKP,KAAL,CAAWC,IAA/B,EAFwF,CAElD;;AACtC,eAAKO,QAAL,CAAc;AAAEP,YAAAA,IAAI,EAAE;AAAR,WAAd;AACD,SALI,CAML;AACA;;AACD;AACF,KA7BkB;;AAAA,SAsDnBQ,oBAtDmB,GAsDKC,KAAD,IAAW;AAChC;AACA;AACA,WAAKF,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAES;AAAR,OAAd;AACD,KA1DkB;;AAEjB,SAAKV,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,mBAAO,KAAKX,KAAL,CAAWC,IAAX,CAAgBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,IAAhC;AAAsC,QAAA,gBAAgB,EAAE,KAAKQ;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,SAAD;AAAW,QAAA,aAAa,EAAE,KAAKV;AAA/B;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAgBiB,QAAZa,YAAY,GAAG;AACnB,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,EAAU;AAC/BC,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFsB;AAK/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,EAAE,EAAE,CADe;AACZ;AACPC,QAAAA,MAAM,EAAE,EAFW;AAGnBC,QAAAA,KAAK,EAAE,QAHY;AAInBC,QAAAA,OAAO,EAAE,GAJU;AAKnBC,QAAAA,OAAO,EAAE,EALU;AAMnBC,QAAAA,IAAI,EAAE,6BANa;AAMkB;AACrCC,QAAAA,MAAM,EAAE,CAPW;AAQnBC,QAAAA,QAAQ,EAAE,CARS;AASnBC,QAAAA,QAAQ,EAAE,CATS;AAUnBC,QAAAA,SAAS,EAAE;AAVQ,OAAf;AALyB,KAAV,CAAvB;AAkBA,UAAMC,IAAI,GAAG,MAAMjB,GAAG,CAACkB,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD;;AArD4C;;AA8D/C,eAAenC,gBAAf","sourcesContent":["import React from \"react\";\nimport InputSentence from \"./InputSentence\";\nimport InputTool from \"./InputTool\";\nimport \"./InputSentenceBox.css\";\nclass InputSentenceBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"InputSentenceBox\">\n        <span>{this.state.text.length}/130</span>\n        <InputSentence text={this.state.text} onChangeSentence={this.handleChangeSentence} />\n        <InputTool onClickButton={this.handleOnClickButton} />\n      </div>\n    );\n  }\n\n  handleOnClickButton = () => {\n    if (this.state.text.length > 130) {\n      alert(\"130자 초과입니다.\");\n    } else {\n      if (confirm('\"' + this.state.text + '\"' + \"정말로 이 문장을 업로드 하겠습니까?\\n한번 올린 문장은 수정 불가능 합니다.\")) {\n        document.cookie = \"isupload=true\";\n        this.props.onAddSub(this.state.text); // 상위 컴포넌트로 text전달\n        this.setState({ text: \"\" });\n      }\n      // // 백엔드 서버로 데이터 전송\n      // this.postSentence();\n    }\n  };\n\n  async postSentence() {\n    const res = await fetch(\"api주소\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        id: 2, // TODO\n        writer: \"\",\n        title: \"mysql2\",\n        content: \"2\",\n        comment: \"\",\n        date: \"2021-08-01T11:30:57.618483Z\", // TODO\n        upvote: 0,\n        downvote: 0,\n        position: 0,\n        end_story: false,\n      }),\n    });\n    const data = await res.json();\n    return data;\n  }\n\n  handleChangeSentence = (_text) => {\n    // InputSentence의 onChange가 호출\n    // this.state.text 변경\n    this.setState({ text: _text });\n  };\n}\n\nexport default InputSentenceBox;\n"]},"metadata":{},"sourceType":"module"}